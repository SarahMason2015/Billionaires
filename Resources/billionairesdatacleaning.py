# -*- coding: utf-8 -*-
"""BillionairesDataCleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K1BBFNzzmrQpnVhHSoBDnNlUbh9auXPq
"""

# Import our dependencies
import pandas as pd
import numpy as np
import matplotlib as plt
import matplotlib.pyplot as plt
import sklearn as skl
import tensorflow as tf
from pathlib import Path
from sklearn.linear_model import LinearRegression

billion_df = pd.read_csv("billionaires_dataset.csv")
billion_df.head()



billion_df.drop('company.founded', axis = 1, inplace = True)

"""# Cleaning code in DataFrame ***billion_df***"""

billion_df.head(5)

zero = billion_df.loc[billion_df['location.region'] == 0]
zero

billion_df.nunique()

billion_df['location.citizenship'].value_counts()

#good place for binning or bucketing
# actually leave all in, even 1 values

billion_df['location.region'].value_counts()
#remove null value here
#Ben

billion_df['wealth.how.industry'].value_counts()

#needs cleaning, combining
#consider a spiral chart
#ANDREW will combine several of these columns with the help of his tutor on Tuesday

billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'Money Management': 'Financial'})
billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'Diversified financial': 'Financial'})
billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'Hedge funds': 'Financial'})
billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'banking': 'Financial'})
billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'Venture Capital': 'Financial'})
billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'Private equity/leveraged buyout': 'Financial'})
billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'Technology-Computer': 'Technology'})
billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'Technology-Medical': 'Technology'})
billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'Constrution': 'Construction'})
billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'Non-consumer industrial': 'Construction'})
billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'Mining and metals': 'Construction'})
billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'0': 'Other'})
billion_df['wealth.how.industry'] = billion_df["wealth.how.industry"].replace({'services': 'Consumer'})
billion_df['wealth.how.industry'].value_counts()

billion_df['wealth.how.inherited'].value_counts()
#combine all columns that aren't "not inherited". Combine all non-"non inherited" columns.
#Sarah will do this

billion_df['wealth.how.inherited'] = billion_df["wealth.how.inherited"].replace({'5th generation or longer': 'inherited'})
billion_df['wealth.how.inherited'] = billion_df["wealth.how.inherited"].replace({'spouse/widow': 'inherited'})
billion_df['wealth.how.inherited'] = billion_df["wealth.how.inherited"].replace({'father': 'inherited'})
billion_df['wealth.how.inherited'] = billion_df["wealth.how.inherited"].replace({'4th generation': 'inherited'})
billion_df['wealth.how.inherited'] = billion_df["wealth.how.inherited"].replace({'3rd generation': 'inherited'})
billion_df['wealth.how.inherited'].value_counts()

billion_df['demographics.gender'].value_counts()
#remove married couple 
#Ben. Remove these "married couple" rows from the datafram

billion_df.to_csv('billionaires_clean.csv')

billion_df.duplicated().value_counts()

billion_df

billion_df.to_csv('billion_clean.csv')

#Rename columns with simpler titles
# Then get back to this dataframe error.

"""# Linear Regression with Billionaires, Company foundings"""

billionaires_df = pd.read_csv("billionaires.csv")
billionaires_df.head(10)

billionaires_df.rename(columns={'company.founded':'co_founded', 'wealth.worth in billions':'wealth_bb'}, inplace=True)
billionaires_df.head(5)



billionaires_df['co_founded'].value_counts()

billion_com_clean = billionaires_df[billionaires_df.co_founded !=0]
# ref: https://www.codegrepper.com/code-examples/python/delete+row+with+zero+value+in+a+column+pyton

#from 17.2.3
plt.scatter(billion_com_clean.co_founded, billion_com_clean.wealth_bb)
plt.xlabel('Company Founded')
plt.ylabel('Wealth in Billions')
plt.show()

model = LinearRegression()

X = billion_com_clean.co_founded.values.reshape(-1, 1)
y = billion_com_clean.wealth_bb

model.fit(X,y)

y_pred= model.predict(X)
print(y_pred.shape)

plt.scatter(X,y)
plt.plot(X, y_pred, color = 'red')
plt.show()
#All that work for nothing! At least I got to experiment with Linear Regression

"""# Logistic Regression to Predict Aires vs Heirs"""

billion_df.head(5)

from sklearn.preprocessing import LabelEncoder

#17.6.3
le = LabelEncoder()

billion2df = billion_df.copy()
billion2df['demographics.gender'] = le.fit_transform(billion2df['demographics.gender'])
billion2df.head(5)

billion2df['location.region'] = le.fit_transform(billion2df['location.region'])
billion2df['wealth.how.industry'] = le.fit_transform(billion2df['wealth.how.industry'])
billion2df['wealth.how.inherited'] = le.fit_transform(billion2df['wealth.how.inherited'])
billion2df.head(5)

billion_encoded = billion2df.drop(['location.citizenship'], axis = 1)

billion_encoded.head(5)

billion_encoded.to_csv("billion_encoded.csv")

y = billion_encoded['wealth.how.inherited']
y

X = billion_encoded.drop(['wealth.how.inherited'], axis = 1)

from sklearn.preprocessing import StandardScaler
# data_scaler = StandardScaler()
# billions_caled = data_scaler.fit_transform(X)